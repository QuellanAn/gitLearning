package com.catic.mobilehos.dao.jdbc;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import com.catic.mobilehos.dao.ServiceEvaluationHosDAO;
import com.catic.mobilehos.po.ServiceEvaluationHosPO;
import com.catic.mobilehos.po.ServiceEvaluationPO;
import com.catic.mobilehos.utils.CommonUtils;

/**
 * 星级服务评价dao
 * @author yjj
 *
 */
public class ServiceEvaluationHosDAOImpl extends JdbcDaoSupport implements  ServiceEvaluationHosDAO{

	private Log log = LogFactory.getLog(this.getClass());
	
	
	@Override
	public List<ServiceEvaluationHosPO> findListByParas(String doctorName,String departmentCode,
			String overallEvaluation, java.sql.Date startDate, java.sql.Date endDate, int offset,
			int length) {
		try {
		JdbcTemplate jt = this.getJdbcTemplate();
		SimpleDynamicSQL.SelectSQL sql = new SimpleDynamicSQL.SelectSQL();
		sql.setBaseSQL(
				"select a.card_number AS cardNumber,a.patient_name AS patientName,a.department_name AS departmentName,a.doctor_name AS doctorName,a.doctor_date AS lookDate,s.* FROM service_evaluation_hos s LEFT JOIN app_reg_orders a ON s.app_reg_order_id=a.app_reg_order_id ",
				true);
		
		//获取的区间
		sql.setLimit(offset, length);
		
		if(StringUtils.isNotBlank(doctorName)){
			sql.addPara("a.doctor_name", "like", "%" + doctorName + "%");
		}
		if(StringUtils.isNotBlank(departmentCode)){
			sql.addPara("a.department_id", "=", departmentCode);
		}
		if(StringUtils.isNotBlank(overallEvaluation)){
			sql.addPara("s.overallEvaluation", "=", overallEvaluation);
		}
		if(startDate!=null){
			Date start=CommonUtils.addTime(startDate, 23, 59, 59);
			startDate= new java.sql.Date(start.getTime());
			sql.addPara("s.createDate", ">=", startDate);
		}
		if(endDate!=null){
			Date d = CommonUtils.addTime(endDate, 23, 59, 59);
			endDate = new java.sql.Date(d.getTime());
			sql.addPara("s.createDate", "<=", endDate);
		}
		sql.addSQLPart("GROUP BY s.serviceEvaluationId");
		
		String fullSQL = sql.getFullSQL().toString();
		Object[] args = sql.getParas().toArray();
		
		List<ServiceEvaluationHosPO> lst;
		//System.out.println(departmentCode+" "+fullSQL);
		if (sql.getParas().size() > 0) {
			lst = jt.query(fullSQL, args, new ServiceEvaluationHosPO());
		} else {
			lst = jt.query(fullSQL, new ServiceEvaluationHosPO());
		}
		
		return lst;
	} catch (Exception ex) {
		ex.printStackTrace();
		// log.error(null,ex);
		return null;
	}
	}

	@Override
	public int countServiceEvaluationHos(String doctorName,String departmentCode,String overallEvaluation,
			java.sql.Date startDate, java.sql.Date endDate) {
		try {
			JdbcTemplate jt = this.getJdbcTemplate();
			SimpleDynamicSQL.SelectSQL sql = new SimpleDynamicSQL.SelectSQL();
			sql.setBaseSQL(
					"select COUNT(s.serviceEvaluationId ) FROM service_evaluation_hos s LEFT JOIN app_reg_orders a ON s.app_reg_order_id=a.app_reg_order_id ",
					true);
			if(StringUtils.isNotBlank(doctorName)){
				sql.addPara("a.doctor_name", "like", "%" + doctorName + "%");
			}
			if(StringUtils.isNotBlank(departmentCode)){
				sql.addPara("a.department_id", "=", departmentCode);
			}
			if(StringUtils.isNotBlank(overallEvaluation)){
				sql.addPara("s.overallEvaluation", "=", overallEvaluation);
			}
			if(startDate!=null){
				Date start=CommonUtils.addTime(startDate, 23, 59, 59);
				startDate= new java.sql.Date(start.getTime());
				sql.addPara("s.createDate", ">=", startDate);
			}
			if(endDate!=null){
				Date d = CommonUtils.addTime(endDate, 23, 59, 59);
				endDate = new java.sql.Date(d.getTime());
				sql.addPara("s.createDate", "<=", endDate);
			}
		
			String fullSQL = sql.getFullSQL().toString();

			int c = 0;
			log.debug("sql.getParas().size() = " + sql.getParas().size());
			if (sql.getParas().size() > 0) {
				c = jt.queryForObject(fullSQL, sql.getParas().toArray(),
						Integer.class);
			} else {
				c = jt.queryForObject(fullSQL, Integer.class);
			}
			return c;
		} catch (DataAccessException ex) {
			System.out.println(ex);
			log.error(null, ex);
			throw ex;
		}
	}

	@Override
	public ServiceEvaluationHosPO findServiceEvaluationHosById(
			Integer serviceEvaluationId) {
		StringBuffer sql=new StringBuffer();
		sql.append("select a.card_number AS cardNumber,a.patient_name AS patientName,a.department_name AS departmentName,a.doctor_name AS doctorName,a.doctor_date AS lookDate,s.* FROM service_evaluation_hos s LEFT JOIN app_reg_orders a ON s.app_reg_order_id=a.app_reg_order_id ");
		sql.append(" WHERE s.serviceEvaluationId=? ");
		//System.out.println(sql.toString());
		List<ServiceEvaluationHosPO> lst =this.getJdbcTemplate().query(sql.toString(),new Object[]{ serviceEvaluationId},new ServiceEvaluationHosPO());
		if(lst==null||lst.size()==0){
			return null;
		}
		return lst.get(0);
		
	}

	@Override
	public int statisticServiceEvaluationHos(String departmentCode,
			String overallEvaluation, java.sql.Date startDate,
			java.sql.Date endDate) {
		try {
			JdbcTemplate jt = this.getJdbcTemplate();
			SimpleDynamicSQL.SelectSQL sql = new SimpleDynamicSQL.SelectSQL();
			sql.setBaseSQL(
					"select COUNT(s.serviceEvaluationId ) FROM service_evaluation_hos s LEFT JOIN app_reg_orders a ON s.app_reg_order_id=a.app_reg_order_id ",
					true);
			/*if(StringUtils.isNotBlank(doctorName)){
				sql.addPara("a.doctor_name", "like", "%" + doctorName + "%");
			}*/
			if(StringUtils.isNotBlank(departmentCode)){
				sql.addPara("a.department_id", "=", departmentCode);
			}
			if(StringUtils.isNotBlank(overallEvaluation)){
				sql.addPara("s.overallEvaluation", "=", overallEvaluation);
			}
			if(startDate!=null){
				Date start=CommonUtils.addTime(startDate, 23, 59, 59);
				startDate= new java.sql.Date(start.getTime());
				sql.addPara("s.createDate", ">=", startDate);
			}
			if(endDate!=null){
				Date d = CommonUtils.addTime(endDate, 23, 59, 59);
				endDate = new java.sql.Date(d.getTime());
				sql.addPara("s.createDate", "<=", endDate);
			}
		
			String fullSQL = sql.getFullSQL().toString();

			int c = 0;
			log.debug("sql.getParas().size() = " + sql.getParas().size());
			if (sql.getParas().size() > 0) {
				c = jt.queryForObject(fullSQL, sql.getParas().toArray(),
						Integer.class);
			} else {
				c = jt.queryForObject(fullSQL, Integer.class);
			}
			return c;
		} catch (DataAccessException ex) {
			System.out.println(ex);
			log.error(null, ex);
			throw ex;
		}
	}

}
