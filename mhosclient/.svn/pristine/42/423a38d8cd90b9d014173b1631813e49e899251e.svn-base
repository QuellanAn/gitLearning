package com.catic.mobilehos.pay.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.catic.mobilehos.pay.biz.IPayOrderBiz;
import com.catic.mobilehos.pay.entity.PayOrder;
import com.catic.mobilehos.pay.util.DateUtils;
import com.catic.mobilehos.utils.Page;


//订单
@Controller
@Scope("prototype")
@SuppressWarnings("serial")
public class PayOrderAction extends BaseAction{

private List<PayOrder> polist;
private PayOrder po;

private String pageNo;
private Page page;

private String orderId;
private String out_trade_no;//订单号
private String body;
private String startdate;
private String enddate;
private String status;
private String pattern;
private String payType;
private String districtId;
private String orderCode;//交易流水号
private String hisTransId;
private String jyType;

private String flag="0";//0：跳转到详情界面  1:跳转到退款界面  

private String stime=DateUtils.getDateBefore(7);
private String etime=DateUtils.getDateBefore(13);

public String findAll(){
try {
	if(StringUtils.isBlank(pageNo)){
		pageNo = "1";
	}
	
	PayOrder payOrder=new PayOrder();
	payOrder.setStartdate(startdate);
	payOrder.setEnddate(enddate);

	if(StringUtils.isNotBlank(status)){
		payOrder.setPayStatus(Integer.parseInt(status));	
	}
	if(StringUtils.isNotBlank(pattern)){
		payOrder.setPattern(Integer.parseInt(pattern));
	}
	if(StringUtils.isNotBlank(payType)){
		payOrder.setPayType(Integer.parseInt(payType));
	}
	if(StringUtils.isNotBlank(districtId)){
		payOrder.setDistrictId(Integer.parseInt(districtId));
	}
	if(StringUtils.isNotBlank(body)){
		payOrder.setBody(body);	
	}
	if(StringUtils.isNotBlank(out_trade_no)){
		payOrder.setOut_trade_no(out_trade_no);
	}
	if(StringUtils.isNotBlank(hisTransId)){
		payOrder.setHisTransId(hisTransId);
	}
	if(StringUtils.isNotBlank(orderCode)){
		payOrder.setOrderCode(orderCode);
	}
	polist=payOrderBiz.findAllByPL(payOrder,null);	

	page=new Page(Integer.parseInt(pageNo),10, this.polist.get(0).getCount());	
	polist=payOrderBiz.findAllByPL(payOrder,page);
/*	if(polist!=null&&polist.size()>0){
		for(int i=0;i<polist.size();i++){
			Boolean flag=false;	
			if(polist.get(i)!=null&&polist.get(i).getHisStatus()==0){
			if(polist.get(i).getPattern()==0){//微信支付				
				ScanPayQueryReqData scanPayQueryReqData = new ScanPayQueryReqData("", polist.get(i).getOut_trade_no());
				ScanPayQueryBusiness.ResultListener resultListener = new ScanPayQueryResultListener();
				ScanPayQueryResData scanPayQueryResData = WXPay.doScanPayQueryBusiness(scanPayQueryReqData, resultListener);
				if(scanPayQueryResData != null){
					//交易状态用来确认是否交易成功
					//SUCCESS—支付成功    REFUND—转入退款  NOTPAY—未支付  CLOSED—已关闭  USERPAYING--用户支付中  PAYERROR--支付失败(其他原因，如银行返回失败)
					String tradeState = scanPayQueryResData.getTrade_state();
					if(tradeState.equals("SUCCESS")){//支付成功
						polist.get(i).setOutStatus(1);					
						if(polist.get(i)!=null&&polist.get(i).getPayStatus()!=1){//不匹配则修改数据的支付状态
							flag=true;
						}
					}else{
						polist.get(i).setOutStatus(0);
					}
				}
			}else if(polist.get(i)!=null&&polist.get(i).getPattern()==1){//支付宝支付
		            String result=new AliPay().trade_query(polist.get(i).getOut_trade_no());          
		            if(result.equals("1")){
		            	polist.get(i).setOutStatus(0);
		            }else if(result.equals("2")){
		            	polist.get(i).setOutStatus(0);
		            }else if(result.equals("3")){
		            	polist.get(i).setOutStatus(0);
		            }else{
		            	polist.get(i).setOutStatus(1);
		            	if(polist.get(i).getPayStatus()!=1){
		            		flag=true;
		            	}
		            }
			}
			if(flag){
				payOrderBiz.alterPayStautus(1, polist.get(i).getOut_trade_no());	
			}	
			}
		}
	}*/

	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}			
	return SUCCESS;
}

/*
 * 查看订单详情
 */
public String findDetails(){
	try {
		po=payOrderBiz.findByOrderId(orderId);
//		if(po!=null){
//			unpaid=new UnpaidPO();
//			unpaid.setUnpaid_id(po.getUnpaid_id());
//			unpaid=unpaidBiz.findOne(unpaid);
//		}
	
	} catch (Exception e) {
		
	}
	if(flag.equals("1")){
		return "refund";
	}else{
		return "details";
	}
	
}

public String findAllByPlFlow(){
	if(StringUtils.isBlank(pageNo)){
		pageNo = "1";
	}
	PayOrder payOrder=new PayOrder();
	payOrder.setStartdate(startdate);
	payOrder.setEnddate(enddate);

	if(StringUtils.isNotBlank(status)){
		payOrder.setPayStatus(Integer.parseInt(status));	
	}
	if(StringUtils.isNotBlank(pattern)){
		payOrder.setPattern(Integer.parseInt(pattern));
	}
	if(StringUtils.isNotBlank(payType)){
		payOrder.setPayType(Integer.parseInt(payType));
	}
	if(StringUtils.isNotBlank(districtId)){
		payOrder.setDistrictId(Integer.parseInt(districtId));
	}
	if(StringUtils.isNotBlank(body)){
		payOrder.setBody(body);	
	}
	if(StringUtils.isNotBlank(jyType)){
		payOrder.setPayStatus(Integer.parseInt(jyType));	
	}
	
	if(StringUtils.isNotBlank(out_trade_no)){
		payOrder.setOut_trade_no(out_trade_no);
	}
	if(StringUtils.isNotBlank(hisTransId)){
		payOrder.setHisTransId(hisTransId);
	}
	if(StringUtils.isNotBlank(orderCode)){
		payOrder.setOrderCode(orderCode);
	}
	polist=payOrderBiz.findAllByPlFlow(payOrder,null);	
	page=new Page(Integer.parseInt(pageNo),10, this.polist.get(0).getCount());	
	polist=payOrderBiz.findAllByPlFlow(payOrder,page);
	return "flow";
}

public void selectBytime(){
	try {
		PayOrder order=payOrderBiz.findByNearTime();
		Integer toatal=order.getTotalMoney();
		if(toatal==null){
			toatal=1;
		}
		Integer count=0;
		double num=0;
		Map<String, Object> map=new HashMap<String, Object>();
		List<Object> listMap=new ArrayList<Object>();
		for(int i=6;i>=0;i--){
			String timeExpire=DateUtils.getDateBefore(i);
			Map<String,Object> maps=new HashMap<String,Object>();
			po=payOrderBiz.findByTimeExpire(timeExpire);
			if(po.getTotalMoney()==null ){
				Integer money=1;
				count+=money;
				maps.put("name", timeExpire);
				maps.put("val", money);
			}else{
				count+=po.getTotalMoney();
				maps.put("name", timeExpire);
				maps.put("val", po.getActualPay());
			}
			listMap.add(maps);
		}
		if(count>=toatal){
			num=((double)count-toatal)/toatal*100;
			order.setUpDown(" ↑ ");
		}else{
			num=((double)toatal-count)/toatal*100;
			order.setUpDown(" ↓ ");
		}
		
		DecimalFormat df = new DecimalFormat("0.00");//格式化小数，不足的补0
		String size = df.format(num);//返回的是String类型的
		order.setContrast(size+"%");
		order.setStime(stime);
		order.setEtime(etime);
		order.setTotalMoney(count);
		
		map.put("all", listMap);
		map.put("po",order);
		
		JSONObject json=JSONObject.fromObject(map);
		this.jsonObj(json.toString());
	} catch (Exception e) {
		e.printStackTrace();
	}
	
}

public void selectTotalCount(){
	try {
		PayOrder order=payOrderBiz.findByNearTime();
		Integer zongCount=order.getTotalCount();
		Integer totalCount=0;
		double num=0;
		Map<String, Object> map=new HashMap<String, Object>();
		List<Object> listMap=new ArrayList<Object>();
		for(int i=6;i>=0;i--){
			String timeExpire=DateUtils.getDateBefore(i);
			Map<String,Object> maps=new HashMap<String,Object>();
			po=payOrderBiz.findByTimeExpire(timeExpire);
			if(po.getTotalCount()==null || po.getTotalCount()==0){
				Integer biCount=1;
				totalCount+=biCount;
				maps.put("name", timeExpire);
				maps.put("val", biCount);
			}else{
				totalCount+=po.getTotalCount();
				maps.put("name", timeExpire);
				maps.put("val", po.getTotalCount());
			}
			listMap.add(maps);
		}
		if(totalCount>=zongCount){
			num=((double)totalCount-zongCount)/zongCount*100;
			order.setUpDown(" ↑ ");
		}else{
			num=((double)zongCount-totalCount)/zongCount*100;
			order.setUpDown(" ↓ ");
		}
		
		DecimalFormat df = new DecimalFormat("0.00");//格式化小数，不足的补0
		String size = df.format(num);//返回的是String类型的
		order.setContrast(size+"%");
		order.setStime(stime);
		order.setEtime(etime);
		order.setTotalCount(totalCount);
		
		map.put("all", listMap);
		map.put("po",order);
		
		JSONObject json=JSONObject.fromObject(map);
		this.jsonObj(json.toString());
	}catch (Exception e) {
		e.printStackTrace();
	}
}

public void selectAvgMoney(){
	try{
		PayOrder order=payOrderBiz.findByNearTime();
		Integer junMoney=order.getAvgMoney();
		if(junMoney==null){
			junMoney=1;
		}
		Integer avgMoney=0;
		double num=0;
		Map<String, Object> map=new HashMap<String, Object>();
		List<Object> listMap=new ArrayList<Object>();
		for(int i=6;i>=0;i--){
			String timeExpire=DateUtils.getDateBefore(i);
			Map<String,Object> maps=new HashMap<String,Object>();
			po=payOrderBiz.findByTimeExpire(timeExpire);
			if(po.getAvgMoney()==null ){
				Integer renjun=1;
				avgMoney+=renjun;
				maps.put("name", timeExpire);
				maps.put("val", renjun);
			}else{
				avgMoney+=po.getAvgMoney();
				maps.put("name", timeExpire);
				maps.put("val", po.getAvgMoney());
			}
			listMap.add(maps);
		}
		if(avgMoney>=junMoney){
			num=((double)avgMoney-junMoney)/junMoney*100;
			order.setUpDown(" ↑ ");
		}else{
			num=((double)junMoney-avgMoney)/junMoney*100;
			order.setUpDown(" ↓ ");
		}
		
		DecimalFormat df = new DecimalFormat("0.00");//格式化小数，不足的补0
		String size = df.format(num);//返回的是String类型的
		order.setContrast(size+"%");
		order.setStime(stime);
		order.setEtime(etime);
		order.setAvgMoney(avgMoney);
		
		map.put("all", listMap);
		map.put("po",order);
		
		JSONObject json=JSONObject.fromObject(map);
		this.jsonObj(json.toString());
	}catch (Exception e) {
		e.printStackTrace();
	}
}

public List<PayOrder> getPolist() {
	return polist;
}
public void setPolist(List<PayOrder> polist) {
	this.polist = polist;
}
public IPayOrderBiz getPayOrderBiz() {
	return payOrderBiz;
}
public void setPayOrderBiz(IPayOrderBiz payOrderBiz) {
	this.payOrderBiz = payOrderBiz;
}
public String getPageNo() {
	return pageNo;
}
public void setPageNo(String pageNo) {
	this.pageNo = pageNo;
}
public Page getPage() {
	return page;
}
public void setPage(Page page) {
	this.page = page;
}

public String getBody() {
	return body;
}
public void setBody(String body) {
	this.body = body;
}
public String getStartdate() {
	return startdate;
}
public void setStartdate(String startdate) {
	this.startdate = startdate;
}
public String getEnddate() {
	return enddate;
}
public void setEnddate(String enddate) {
	this.enddate = enddate;
}
public String getStatus() {
	return status;
}
public void setStatus(String status) {
	this.status = status;
}
public String getPattern() {
	return pattern;
}
public void setPattern(String pattern) {
	this.pattern = pattern;
}
public String getOrderId() {
	return orderId;
}

public void setOrderId(String orderId) {
	this.orderId = orderId;
}
public PayOrder getPo() {
	return po;
}
public void setPo(PayOrder po) {
	this.po = po;
}
public String getOrderCode() {
	return orderCode;
}
public void setOrderCode(String orderCode) {
	this.orderCode = orderCode;
}
public String getOut_trade_no() {
	return out_trade_no;
}
public void setOut_trade_no(String out_trade_no) {
	this.out_trade_no = out_trade_no;
}
public String getFlag() {
	return flag;
}
public void setFlag(String flag) {
	this.flag = flag;
}
public String getPayType() {
	return payType;
}
public void setPayType(String payType) {
	this.payType = payType;
}
public String getDistrictId() {
	return districtId;
}
public void setDistrictId(String districtId) {
	this.districtId = districtId;
}

public String getHisTransId() {
	return hisTransId;
}

public void setHisTransId(String hisTransId) {
	this.hisTransId = hisTransId;
}

public String getJyType() {
	return jyType;
}

public void setJyType(String jyType) {
	this.jyType = jyType;
}
}