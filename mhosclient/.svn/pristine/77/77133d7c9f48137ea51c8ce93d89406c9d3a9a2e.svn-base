package com.catic.mobilehos.pay.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.catic.mobilehos.pay.entity.CheckImport;
import com.catic.mobilehos.pay.util.Constant;
import com.catic.mobilehos.pay.util.DateUtils;
import com.catic.mobilehos.pay.util.ExcleUtils;
import com.catic.mobilehos.utils.Page;
import com.catic.mobilehos.utils.Upload;

/**
 * 对账单导入查询
 * 
 * @author Administrator
 * 
 */
@Controller
@Scope("prototype")
@SuppressWarnings("serial")
public class CheckImportAction extends BaseAction {

	private String batchNumber;
	private String operator;
	private String startDate;
	private String endDate;
	private CheckImport checkImport;
	private List<CheckImport> checkImportList;
	private String name;
	private String source;
	private String createTime;
	private File upload;  
    private String uploadFileName;  
    private String uploadContentType;  
     
	/**
	 * 查询对账单导入列表
	 * 
	 * @return
	 */
	public String findAll() {
		try {
			if (StringUtils.isBlank(pageNo)) {
				pageNo = "1";
			}
			CheckImport checkImport = new CheckImport();
			checkImport.setBatchNumber(batchNumber);
			checkImport.setOperator(operator);
			checkImport.setStartDate(startDate);
			checkImport.setEndDate(endDate);
			checkImportList = checkImportBiz.findAll(null, checkImport);
			if (checkImportList != null && checkImportList.size() > 0) {
				page = new Page(Integer.parseInt(pageNo),
						Constant.DEFAULT_PAGE_SIZE, checkImportList.get(0)
								.getCount());
				checkImportList = checkImportBiz.findAll(page, checkImport);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	/**
	 * 查看详情
	 * @return
	 */
	public String findDetails(){
		
		try {
			checkImport=checkImportBiz.findDetails("", batchNumber);
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return "details";
	}
	
	public void addCheck(){
		try {
			String SavePath=ServletActionContext.getServletContext().getRealPath("acceptedUpload");
			Upload.uploadCheck(upload, SavePath, "\\"+uploadFileName);
			
			Workbook workBook=null;
			InputStream is = new FileInputStream(upload);
			String type = request.getParameter("type");
			if(type.toLowerCase().endsWith("xls")){
				workBook=new HSSFWorkbook(is);
	        }
	        if(type.toLowerCase().endsWith("xlsx")){
	        	workBook= new XSSFWorkbook(is);
	        }
	        Map<String,Object> map = hisCheckBiz.readXls(workBook,uploadFileName,request,response);
	        
	        CheckImport ci=new CheckImport();
	        Date date=new Date();
			Integer n = (int)(Math.random()*1000000);
			ci.setBatchNumber(String.valueOf(date.getTime()+n));
			ci.setName(name);
			ci.setSource(source);
			ci.setFileName(uploadFileName);
			ci.setFilePath(SavePath);
			ci.setSubmitNum(Integer.parseInt(map.get("submitNum")+""));
			ci.setSuccessNum(Integer.parseInt(map.get("successNum")+""));
			ci.setCreateTime(DateUtils.formatDate(date,0));
			ci.setOperator(request.getSession().getAttribute("userName").toString());
			if(Integer.parseInt(map.get("failNum")+"")>0){
				ci.setNoFileName(map.get("noFileName").toString());
				ci.setNoFilePath(map.get("noFilePath").toString());
			}
			checkImportBiz.save(ci);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void modeDown(){
		ExcleUtils.modeDown(request, response);
	}
	
	public String getBatchNumber() {
		return batchNumber;
	}

	public void setBatchNumber(String batchNumber) {
		this.batchNumber = batchNumber;
	}

	public String getOperator() {
		return operator;
	}

	public void setOperator(String operator) {
		this.operator = operator;
	}

	public String getStartDate() {
		return startDate;
	}

	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}

	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	public CheckImport getCheckImport() {
		return checkImport;
	}

	public void setCheckImport(CheckImport checkImport) {
		this.checkImport = checkImport;
	}

	public List<CheckImport> getCheckImportList() {
		return checkImportList;
	}

	public void setCheckImportList(List<CheckImport> checkImportList) {
		this.checkImportList = checkImportList;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	public String getCreateTime() {
		return createTime;
	}

	public void setCreateTime(String createTime) {
		this.createTime = createTime;
	}

	public File getUpload() {
		return upload;
	}

	public void setUpload(File upload) {
		this.upload = upload;
	}

	public String getUploadFileName() {
		return uploadFileName;
	}

	public void setUploadFileName(String uploadFileName) {
		this.uploadFileName = uploadFileName;
	}

	public String getUploadContentType() {
		return uploadContentType;
	}

	public void setUploadContentType(String uploadContentType) {
		this.uploadContentType = uploadContentType;
	}

}
