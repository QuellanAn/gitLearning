package com.catic.mobilehos.service;

import java.sql.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.catic.mobilehos.dao.ServiceEvaluationHosDAO;
import com.catic.mobilehos.po.ServiceEvaluationHosPO;
import com.catic.mobilehos.service.vo.Page;
import com.catic.mobilehos.service.vo.ServiceEvaluationHosVO;
import com.catic.mobilehos.service.vo.VOPOConverter;

public class ServiceEvaluationHosServiceImpl  implements ServiceEvaluationHosService{
	private Log log = LogFactory.getLog(this.getClass());
	
	private ServiceEvaluationHosDAO  serviceEvaluationHosDAO;
	
	
	public ServiceEvaluationHosDAO getServiceEvaluationHosDAO() {
		return serviceEvaluationHosDAO;
	}


	public void setServiceEvaluationHosDAO(
			ServiceEvaluationHosDAO serviceEvaluationHosDAO) {
		this.serviceEvaluationHosDAO = serviceEvaluationHosDAO;
	}


	@Override
	public Page<ServiceEvaluationHosVO> findListByParas(String doctorName,String departmentCode,
			String overallEvaluation, java.sql.Date startDate, java.sql.Date endDate, int page,
			int pageSize,String cardNumber,String patientname) {
		
		
		try {
			
			int totalRecord = this.serviceEvaluationHosDAO.countServiceEvaluationHos(doctorName, departmentCode,
					overallEvaluation, startDate, endDate, cardNumber, patientname);
			
			
			Page<ServiceEvaluationHosVO> p = new Page<ServiceEvaluationHosVO>(
					totalRecord, pageSize, page);

			List<ServiceEvaluationHosPO> lst = this.serviceEvaluationHosDAO.findListByParas(doctorName, departmentCode, 
					overallEvaluation, startDate, endDate, p.getOffset(), p.getPageSize(), cardNumber, patientname);

			VOPOConverter<ServiceEvaluationHosVO, ServiceEvaluationHosPO> cvt = new VOPOConverter<ServiceEvaluationHosVO, ServiceEvaluationHosPO>(
					ServiceEvaluationHosVO.class, ServiceEvaluationHosPO.class);
			p.setCurPageData(cvt.fromPOList(lst));
			return p;
		} catch (Exception e) {
			log.error("queryAppRegOrdersByParas出现错误：", e);
			return null;
		}
		
		
	}


	@Override
	public ServiceEvaluationHosVO findServiceEvaluationHosById(
			Integer serviceEvaluationId) {


		ServiceEvaluationHosPO spo= this.serviceEvaluationHosDAO.findServiceEvaluationHosById(serviceEvaluationId);
		if(spo==null){
		return null;
		}else{
			
			VOPOConverter<ServiceEvaluationHosVO, ServiceEvaluationHosPO> converter = new VOPOConverter<ServiceEvaluationHosVO, ServiceEvaluationHosPO>(
					ServiceEvaluationHosVO.class, ServiceEvaluationHosPO.class);
			ServiceEvaluationHosVO svo=converter.poToVO(spo);
			return svo;
			
		}
	}


	@Override
	public ServiceEvaluationHosVO statisticEvaluateHos(String departmentCode,
			Date startDate, Date endDate) {
		ServiceEvaluationHosVO svo=new ServiceEvaluationHosVO();
		int goodNum=this.serviceEvaluationHosDAO.statisticServiceEvaluationHos(departmentCode, "0", startDate, endDate);
		int commonNum=this.serviceEvaluationHosDAO.statisticServiceEvaluationHos(departmentCode, "1", startDate, endDate);
		int badNum=this.serviceEvaluationHosDAO.statisticServiceEvaluationHos(departmentCode, "2", startDate, endDate);
		svo.setGoodNum(goodNum);
		svo.setCommonNum(commonNum);
		svo.setBadNum(badNum);
		
		return svo;
	}

}
